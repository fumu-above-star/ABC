#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int b[91]={-1,-1,-1,-1,-1,-1,-1,-1,-1,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1, 0, 0, 0, 2, 1, 0, 0, 0,
           -1, 0, 0, 0, 1, 2, 0, 0, 0,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1, 0, 0, 0, 0, 0, 0, 0, 0,
           -1,-1,-1,-1,-1,-1,-1,-1,-1,-1};

int value[91] = {-1, -1, -1, -1, -1, -1, -1, -1, -1,
                 -1, 30,-12,  0, -2, -2,  0,-12, 30,
                 -1,-12,-15, -3, -3, -3, -3,-15,-12,
                 -1,  0, -3,  0, -2, -2,  0, -3,  0,
                 -1, -2, -3, -2, -2, -2, -2, -3, -2,
                 -1, -2, -3, -2, -2, -2, -2, -3, -2,
                 -1,  0, -3,  0, -2, -2,  0, -3,  0,
                 -1,-12,-15, -3, -3, -3, -3,-15,-12,
                 -1, 30,-12,  0, -2, -2,  0,-12, 30,
                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1

};

double time;

int check(int pos, int color)
{
  int k;
  int enemy = 3 - color;

  if( b[pos] ) return 0;
  if( b[pos-10]==enemy ){
    k = pos - 20; while( b[k]==enemy ) k-=10;
    if( b[k]==color ) return 1;
  }
  if( b[pos-9]==enemy ){
    k = pos - 18; while( b[k]==enemy ) k-=9;
    if( b[k]==color ) return 1;
  }
  if( b[pos-8]==enemy ){
    k = pos - 16; while( b[k]==enemy ) k-=8;
    if( b[k]==color ) return 1;
  }
  if( b[pos-1]==enemy ){
    k = pos - 2; while( b[k]==enemy ) k--;
    if( b[k]==color ) return 1;
  }
  if( b[pos+1]==enemy ){
    k = pos + 2; while( b[k]==enemy ) k++;
    if( b[k]==color ) return 1;
  }
  if( b[pos+8]==enemy ){
    k = pos + 16; while( b[k]==enemy ) k+=8;
    if( b[k]==color ) return 1;
  }
  if( b[pos+9]==enemy ){
    k = pos + 18; while( b[k]==enemy ) k+=9;
    if( b[k]==color ) return 1;
  }
  if( b[pos+10]==enemy ){
    k = pos + 20; while( b[k]==enemy ) k+=10;
    if( b[k]==color ) return 1;
  }
  return 0;
}
int vmax(int p[],int p_cnt)//valuemaxを選ぶ
{
  int i;
  int max;
  int pos;
  max = -16;
  for(i = 0; i < p_cnt; i++){
    if(value[p[i]] > max){
      max = value[p[i]];
      pos = p[i];
    }
  }

  return pos;
}

void play(int me)
{
  int i, k;
  int p_cnt = 0;
  int p[32];

  for(i = 10; i <= 80; i++){
    if( check(i,me) ) p[p_cnt++]=i;
  }
  if( p_cnt > 0 ){
    k = vmax(p,p_cnt);
    //k = p[random() % p_cnt];
    printf("%c%c\n", 'a'+((k-10) % 9), '1'+((k-10)/9));
  }else{
    printf("%%pass\n");
  }
}

int main(int argc, char *argv[])
{
  int i, j;
  if( argc != 4 ){
    printf("Parameter error!\n");
    return 0;
  }
  if( strlen(argv[1]) != 32 ){
    printf("Parameter error!\n");
    return 0;
  }
  j = 10;
  for(i = 0; i < 32; i++){
    switch(argv[1][i]-'0'){
    case 1:       b[j+1]=1;break;
    case 2:       b[j+1]=2;break;
    case 3:b[j]=1;         break;
    case 4:b[j]=1;b[j+1]=1;break;
    case 5:b[j]=1;b[j+1]=2;break;
    case 6:b[j]=2;         break;
    case 7:b[j]=2;b[j+1]=1;break;
    case 8:b[j]=2;b[j+1]=2;break;
    }
    j+=2;
    if( (i & 3)==3 ) j++;//3の倍数の時-1をとばすためにj++
  }
  time = atof(argv[3]);

  if( argv[2][1]=='b' ) play(1);
  else if( argv[2][1]=='w' ) play(2);
  else printf("Parameter error!\n");
  return 0;
}